[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "pendulum",
        "description": "pendulum",
        "isExtraImport": true,
        "detail": "pendulum",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "isExtraImport": true,
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "website",
        "description": "website",
        "isExtraImport": true,
        "detail": "website",
        "documentation": {}
    },
    {
        "label": "Chat",
        "kind": 6,
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "peekOfCode": "class Chat:\n    def __init__(self, question):\n        self.question = question \n        self.messages = [\n            {\"role\": \"system\", \"content\": f\"{question}.\"}\n        ]\n    def add_message(self, role, content):\n        self.messages.append({\"role\": role, \"content\": content})\n    def response(self, user_input):\n        # Add user input to the conversation history",
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "peekOfCode": "api_key = os.getenv(\"OPENAI_API_KEY\")\n# Print the API key to verify it's loaded correctly (remove this line in production)\nprint(f\"Loaded API key: {api_key}\")\nclient = OpenAI(api_key=api_key)\nclass Chat:\n    def __init__(self, question):\n        self.question = question \n        self.messages = [\n            {\"role\": \"system\", \"content\": f\"{question}.\"}\n        ]",
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "peekOfCode": "client = OpenAI(api_key=api_key)\nclass Chat:\n    def __init__(self, question):\n        self.question = question \n        self.messages = [\n            {\"role\": \"system\", \"content\": f\"{question}.\"}\n        ]\n    def add_message(self, role, content):\n        self.messages.append({\"role\": role, \"content\": content})\n    def response(self, user_input):",
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "add_prompt",
        "kind": 2,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "def add_prompt(data, user_id):\n    conn = get_db_connection()\n    cur = conn.cursor()\n    query = \"INSERT INTO prompt (data, date, user_id) VALUES (?, ?, ?)\"\n    cur.execute(query, (data, now().to_datetime_string(), user_id))\n    conn.commit()\n    conn.close()\ndef add_poem(data, user_id, prompt_id):\n    conn = get_db_connection()\n    cur = conn.cursor()",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "add_poem",
        "kind": 2,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "def add_poem(data, user_id, prompt_id):\n    conn = get_db_connection()\n    cur = conn.cursor()\n    query = \"INSERT INTO poem (data, date, user_id, prompt_id) VALUES (?, ?, ?, ?)\"\n    cur.execute(query, (data, now().to_datetime_string(), user_id, prompt_id))\n    conn.commit()\n    conn.close()\ndef add_user(email, password, first_name):\n    conn = get_db_connection()\n    cur = conn.cursor()",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "add_user",
        "kind": 2,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "def add_user(email, password, first_name):\n    conn = get_db_connection()\n    cur = conn.cursor()\n    query = \"INSERT INTO user (email, password, first_name) VALUES (?, ?, ?)\"\n    cur.execute(query, (email, password, first_name))\n    conn.commit()\n    conn.close()\ndef get_prompts_by_user_id(user_id):\n    conn = get_db_connection()\n    cur = conn.cursor()",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "get_prompts_by_user_id",
        "kind": 2,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "def get_prompts_by_user_id(user_id):\n    conn = get_db_connection()\n    cur = conn.cursor()\n    query = \"SELECT * FROM prompt WHERE user_id = ?\"\n    cur.execute(query, (user_id,))\n    prompts = cur.fetchall()\n    conn.close()\n    return prompts\ndef get_poems_by_prompt_id(prompt_id):\n    conn = get_db_connection()",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "get_poems_by_prompt_id",
        "kind": 2,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "def get_poems_by_prompt_id(prompt_id):\n    conn = get_db_connection()\n    cur = conn.cursor()\n    query = \"SELECT * FROM poem WHERE prompt_id = ?\"\n    cur.execute(query, (prompt_id,))\n    poems = cur.fetchall()\n    conn.close()\n    return poems",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def login():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n        conn = get_db_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM users WHERE email = ? AND password = ?\", (email, password))\n        user = cursor.fetchone()\n        conn.close()\n        if user:",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def logout():\n    return render_template(\"home.html\")\n@routes.route('/sign-up', methods=['GET', 'POST'])\ndef sign_up():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        firstName = request.form.get('firstName')\n        password1 = request.form.get('password1')\n        password2 = request.form.get('password2')\n        try:",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "sign_up",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def sign_up():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        firstName = request.form.get('firstName')\n        password1 = request.form.get('password1')\n        password2 = request.form.get('password2')\n        try:\n            if len(email) < 4:\n                flash(\"Email must be at least 4 characters long.\", category='error')\n                return render_template(\"sign-up.html\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def profile():\n    return render_template(\"profile.html\")\n@routes.route('/chatbot', methods=['GET', 'POST'])\ndef chatbot():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Create an instance of the Chat class",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a poetic assistant. You must answer a question as if you were a poet.\")\n            # Get the chatbot's response\n            response = chat_instance.response(user_input)",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "about_us",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def about_us():\n    return render_template(\"about-us.html\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "routes",
        "kind": 5,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "routes = Blueprint('routes', __name__)\n@routes.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n        conn = get_db_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM users WHERE email = ? AND password = ?\", (email, password))\n        user = cursor.fetchone()",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def home():\n    return render_template(\"home.html\")\n@views.route('/left_sidebar')\ndef left_sidebar():\n    return render_template(\"left_sidebar.html\")\n@views.route('/right_sidebar')\ndef right_sidebar():\n    return render_template(\"right_sidebar.html\")\n@views.route('/no_sidebar')\ndef no_sidebar():",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "left_sidebar",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def left_sidebar():\n    return render_template(\"left_sidebar.html\")\n@views.route('/right_sidebar')\ndef right_sidebar():\n    return render_template(\"right_sidebar.html\")\n@views.route('/no_sidebar')\ndef no_sidebar():\n    return render_template(\"no_sidebar.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "right_sidebar",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def right_sidebar():\n    return render_template(\"right_sidebar.html\")\n@views.route('/no_sidebar')\ndef no_sidebar():\n    return render_template(\"no_sidebar.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "no_sidebar",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def no_sidebar():\n    return render_template(\"no_sidebar.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "views",
        "kind": 5,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "views = Blueprint('views', __name__)\n@views.route('/')\ndef home():\n    return render_template(\"home.html\")\n@views.route('/left_sidebar')\ndef left_sidebar():\n    return render_template(\"left_sidebar.html\")\n@views.route('/right_sidebar')\ndef right_sidebar():\n    return render_template(\"right_sidebar.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = create_app()\nwith app.app_context():\n    # Your code here that needs to run within the app context\n    pass # To avoid indentation error\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "main",
        "documentation": {}
    }
]