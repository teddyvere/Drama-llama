[
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "pendulum",
        "description": "pendulum",
        "isExtraImport": true,
        "detail": "pendulum",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "webbrowser",
        "description": "webbrowser",
        "isExtraImport": true,
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "isExtraImport": true,
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "flask_mail",
        "description": "flask_mail",
        "isExtraImport": true,
        "detail": "flask_mail",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "website",
        "description": "website",
        "isExtraImport": true,
        "detail": "website",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "website",
        "description": "website",
        "isExtraImport": true,
        "detail": "website",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "website.models",
        "description": "website.models",
        "isExtraImport": true,
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "importPath": "website.models",
        "description": "website.models",
        "isExtraImport": true,
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "Poem",
        "importPath": "website.models",
        "description": "website.models",
        "isExtraImport": true,
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_engine_url",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\n            '%', '%%')\n    except AttributeError:\n        return str(get_engine().url).replace('%', '%%')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_db = current_app.extensions['migrate'].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "Chat",
        "kind": 6,
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "peekOfCode": "class Chat:\n    def __init__(self, initial_instruction):\n        self.instruction = initial_instruction \n        self.messages = [\n            {\"role\": \"system\", \"content\": self.instruction}\n        ]\n    def add_message(self, role, content):\n        self.messages.append({\"role\": role, \"content\": content})\n    def response(self, user_input):\n        # Add user input to the conversation history",
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "peekOfCode": "api_key = os.getenv(\"OPENAI_API_KEY\")\n# Print the API key to verify it's loaded correctly (remove this line in production)\nprint(f\"Loaded API key: {api_key}\")\nclient = OpenAI(api_key=api_key)\nclass Chat:\n    def __init__(self, initial_instruction):\n        self.instruction = initial_instruction \n        self.messages = [\n            {\"role\": \"system\", \"content\": self.instruction}\n        ]",
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "peekOfCode": "client = OpenAI(api_key=api_key)\nclass Chat:\n    def __init__(self, initial_instruction):\n        self.instruction = initial_instruction \n        self.messages = [\n            {\"role\": \"system\", \"content\": self.instruction}\n        ]\n    def add_message(self, role, content):\n        self.messages.append({\"role\": role, \"content\": content})\n    def response(self, user_input):",
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "add_prompt",
        "kind": 2,
        "importPath": "website.functions",
        "description": "website.functions",
        "peekOfCode": "def add_prompt(data, user_id):\n    # Use datetime.now() to get the current date and time as a datetime object\n    new_prompt = Prompt(data=data, date=datetime.now(), user_id=user_id)\n    db.session.add(new_prompt)\n    db.session.commit()\ndef add_poem(data, user_id, prompt_id):\n    # Use datetime.now() to get the current date and time as a datetime object\n    print(\"\\n****\\nDatabase Object: poem\", db)\n    new_poem = Poem(data=data, date=datetime.now(), user_id=user_id, prompt_id=prompt_id)\n    db.session.add(new_poem)",
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "add_poem",
        "kind": 2,
        "importPath": "website.functions",
        "description": "website.functions",
        "peekOfCode": "def add_poem(data, user_id, prompt_id):\n    # Use datetime.now() to get the current date and time as a datetime object\n    print(\"\\n****\\nDatabase Object: poem\", db)\n    new_poem = Poem(data=data, date=datetime.now(), user_id=user_id, prompt_id=prompt_id)\n    db.session.add(new_poem)\n    db.session.commit()\ndef add_user(email, password, first_name):\n    print(\"\\n****\\nDatabase Object: user\", db)\n    new_user = Users(email=email, password=password, first_name=first_name)\n    db.session.add(new_user)",
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "add_user",
        "kind": 2,
        "importPath": "website.functions",
        "description": "website.functions",
        "peekOfCode": "def add_user(email, password, first_name):\n    print(\"\\n****\\nDatabase Object: user\", db)\n    new_user = Users(email=email, password=password, first_name=first_name)\n    db.session.add(new_user)\n    db.session.commit()\ndef get_prompts_by_user_id(user_id):\n    return Prompt.query.filter_by(user_id=user_id).all()\ndef get_poems_by_prompt_id(prompt_id):\n    return Poem.query.filter_by(prompt_id=prompt_id).all()",
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "get_prompts_by_user_id",
        "kind": 2,
        "importPath": "website.functions",
        "description": "website.functions",
        "peekOfCode": "def get_prompts_by_user_id(user_id):\n    return Prompt.query.filter_by(user_id=user_id).all()\ndef get_poems_by_prompt_id(prompt_id):\n    return Poem.query.filter_by(prompt_id=prompt_id).all()",
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "get_poems_by_prompt_id",
        "kind": 2,
        "importPath": "website.functions",
        "description": "website.functions",
        "peekOfCode": "def get_poems_by_prompt_id(prompt_id):\n    return Poem.query.filter_by(prompt_id=prompt_id).all()",
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "class Users(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(150), unique=True, nullable=False)\n    password = db.Column(db.String(150), nullable=False)\n    first_name = db.Column(db.String(150), nullable=False)\n    prompts_id = db.relationship('Prompt', backref='users', lazy=True)\n    poems_id = db.relationship('Poem', backref='users', lazy=True)\nclass Prompt(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    data = db.Column(db.Text, nullable=False)",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "kind": 6,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "class Prompt(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    data = db.Column(db.Text, nullable=False)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\nclass Poem(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    data = db.Column(db.Text, nullable=False)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "Poem",
        "kind": 6,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "class Poem(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    data = db.Column(db.Text, nullable=False)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    prompt_id = db.Column(db.Integer, db.ForeignKey('prompt.id'), nullable=False)",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def login():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n        user = Users.query.filter_by(email=email, password=password).first()\n        if user:\n            login_user(user, remember=True)\n            return redirect(url_for('views.home'))\n        else:\n            flash(\"Invalid credentials, try again.\", category='error')",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def logout():\n    logout_user()\n    return redirect(url_for('routes.login'))\n@routes.route('/sign-up', methods=['GET', 'POST'])\ndef sign_up():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        first_name = request.form.get('firstName')\n        password1 = request.form.get('password1')\n        password2 = request.form.get('password2')",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "sign_up",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def sign_up():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        first_name = request.form.get('firstName')\n        password1 = request.form.get('password1')\n        password2 = request.form.get('password2')\n        if len(email) < 4:\n            flash(\"Email must be at least 4 characters long.\", category='error')\n        elif len(first_name) < 2:\n            flash(\"First name must be at least 2 characters long.\", category='error')",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def profile():\n    user_id = current_user.id\n    # Fetch all prompts for the user\n    prompts = get_prompts_by_user_id(user_id)\n    # Count how many times the user has used the chatbot\n    chat_count = len(prompts)\n    # Get the most recent 5 questions\n    recent_questions = [prompt.data for prompt in prompts][-5:]\n    return render_template('profile.html', chat_count=chat_count, recent_questions=recent_questions)\n@routes.route('/chatbot', methods=['GET', 'POST'])",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a poetic assistant. Answer questions in a haiku.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot1_2",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot1_2():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a poetic assistant. Answer questions in a Free verse.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot1_3",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot1_3():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a poetic assistant. Answer questions in a Sonnet.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot1_4",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot1_4():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a poetic assistant. Answer questions in a Acrostic.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot2",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot2():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a poetic assistant. Answer questions in a long poem.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot3",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot3():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a surfer who loves making surfing analogies.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot4",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot4():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a drill instructor who uses visuals to teach students and you love apple pie.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot5",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot5():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are mafia crime boss who is flamboyant and one step ahead of the law.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot6",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot6():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are samuel L Jackson in pulp fiction.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "about_us",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def about_us():\n    if request.method == 'POST':\n        if 'send_message' in request.form:\n            name = request.form.get('name')\n            email = request.form.get('email')\n            message = request.form.get('message')\n            # Process the form data, e.g., send an email or save to the database\n            print(f'Form data received: Name={name}, Email={email}, Message={message}')\n            flash(\"Your message has been sent!\", \"success\")\n            return redirect(url_for('routes.about_us'))",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "routes",
        "kind": 5,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "routes = Blueprint('routes', __name__)\n@routes.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n        user = Users.query.filter_by(email=email, password=password).first()\n        if user:\n            login_user(user, remember=True)\n            return redirect(url_for('views.home'))",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def home():\n    return render_template(\"home.html\")\n@views.route('/left_sidebar')\ndef left_sidebar():\n    return render_template(\"left_sidebar.html\")\n@views.route('/right_sidebar')\ndef right_sidebar():\n    return render_template(\"right_sidebar.html\")\n@views.route('/no_sidebar')\ndef no_sidebar():",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "left_sidebar",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def left_sidebar():\n    return render_template(\"left_sidebar.html\")\n@views.route('/right_sidebar')\ndef right_sidebar():\n    return render_template(\"right_sidebar.html\")\n@views.route('/no_sidebar')\ndef no_sidebar():\n    return render_template(\"no_sidebar.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "right_sidebar",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def right_sidebar():\n    return render_template(\"right_sidebar.html\")\n@views.route('/no_sidebar')\ndef no_sidebar():\n    return render_template(\"no_sidebar.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "no_sidebar",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def no_sidebar():\n    return render_template(\"no_sidebar.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "views",
        "kind": 5,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "views = Blueprint('views', __name__)\n@views.route('/')\ndef home():\n    return render_template(\"home.html\")\n@views.route('/left_sidebar')\ndef left_sidebar():\n    return render_template(\"left_sidebar.html\")\n@views.route('/right_sidebar')\ndef right_sidebar():\n    return render_template(\"right_sidebar.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = create_app()\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\n# Inspect the database for the presence of tables\nwith app.app_context():\n    try:\n        inspector = inspect(db.engine)\n        table_models = {\n            'users': Users,\n            'prompt': Prompt,",
        "detail": "main",
        "documentation": {}
    }
]