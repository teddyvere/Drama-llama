[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "pendulum",
        "description": "pendulum",
        "isExtraImport": true,
        "detail": "pendulum",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "isExtraImport": true,
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "get_poems_by_prompt_id",
        "importPath": "website.functions",
        "description": "website.functions",
        "isExtraImport": true,
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "get_prompts_by_user_id",
        "importPath": "website.functions",
        "description": "website.functions",
        "isExtraImport": true,
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "website",
        "description": "website",
        "isExtraImport": true,
        "detail": "website",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "website",
        "description": "website",
        "isExtraImport": true,
        "detail": "website",
        "documentation": {}
    },
    {
        "label": "Chat",
        "kind": 6,
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "peekOfCode": "class Chat:\n    def __init__(self, initial_instruction):\n        self.instruction = initial_instruction \n        self.messages = [\n            {\"role\": \"system\", \"content\": self.instruction}\n        ]\n    def add_message(self, role, content):\n        self.messages.append({\"role\": role, \"content\": content})\n    def response(self, user_input):\n        # Add user input to the conversation history",
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "peekOfCode": "api_key = os.getenv(\"OPENAI_API_KEY\")\n# Print the API key to verify it's loaded correctly (remove this line in production)\nprint(f\"Loaded API key: {api_key}\")\nclient = OpenAI(api_key=api_key)\nclass Chat:\n    def __init__(self, initial_instruction):\n        self.instruction = initial_instruction \n        self.messages = [\n            {\"role\": \"system\", \"content\": self.instruction}\n        ]",
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "website.chatbot",
        "description": "website.chatbot",
        "peekOfCode": "client = OpenAI(api_key=api_key)\nclass Chat:\n    def __init__(self, initial_instruction):\n        self.instruction = initial_instruction \n        self.messages = [\n            {\"role\": \"system\", \"content\": self.instruction}\n        ]\n    def add_message(self, role, content):\n        self.messages.append({\"role\": role, \"content\": content})\n    def response(self, user_input):",
        "detail": "website.chatbot",
        "documentation": {}
    },
    {
        "label": "add_prompt",
        "kind": 2,
        "importPath": "website.functions",
        "description": "website.functions",
        "peekOfCode": "def add_prompt(data, user_id):\n    # Use datetime.now() to get the current date and time as a datetime object\n    new_prompt = Prompt(data=data, date=datetime.now(), user_id=user_id)\n    db.session.add(new_prompt)\n    db.session.commit()\ndef add_poem(data, user_id, prompt_id):\n    # Use datetime.now() to get the current date and time as a datetime object\n    new_poem = Poem(data=data, date=datetime.now(), user_id=user_id, prompt_id=prompt_id)\n    db.session.add(new_poem)\n    db.session.commit()",
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "add_poem",
        "kind": 2,
        "importPath": "website.functions",
        "description": "website.functions",
        "peekOfCode": "def add_poem(data, user_id, prompt_id):\n    # Use datetime.now() to get the current date and time as a datetime object\n    new_poem = Poem(data=data, date=datetime.now(), user_id=user_id, prompt_id=prompt_id)\n    db.session.add(new_poem)\n    db.session.commit()\ndef add_user(email, password, first_name):\n    new_user = User(email=email, password=password, first_name=first_name)\n    db.session.add(new_user)\n    db.session.commit()\ndef get_prompts_by_user_id(user_id):",
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "add_user",
        "kind": 2,
        "importPath": "website.functions",
        "description": "website.functions",
        "peekOfCode": "def add_user(email, password, first_name):\n    new_user = User(email=email, password=password, first_name=first_name)\n    db.session.add(new_user)\n    db.session.commit()\ndef get_prompts_by_user_id(user_id):\n    return Prompt.query.filter_by(user_id=user_id).all()\ndef get_poems_by_prompt_id(prompt_id):\n    return Poem.query.filter_by(prompt_id=prompt_id).all()",
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "get_prompts_by_user_id",
        "kind": 2,
        "importPath": "website.functions",
        "description": "website.functions",
        "peekOfCode": "def get_prompts_by_user_id(user_id):\n    return Prompt.query.filter_by(user_id=user_id).all()\ndef get_poems_by_prompt_id(prompt_id):\n    return Poem.query.filter_by(prompt_id=prompt_id).all()",
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "get_poems_by_prompt_id",
        "kind": 2,
        "importPath": "website.functions",
        "description": "website.functions",
        "peekOfCode": "def get_poems_by_prompt_id(prompt_id):\n    return Poem.query.filter_by(prompt_id=prompt_id).all()",
        "detail": "website.functions",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "class User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(150), unique=True, nullable=False)\n    password = db.Column(db.String(150), nullable=False)\n    first_name = db.Column(db.String(150), nullable=False)\n    prompts_id = db.relationship('Prompt', backref='user', lazy=True)\n    poems_id = db.relationship('Poem', backref='user', lazy=True)\nclass Prompt(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    data = db.Column(db.Text, nullable=False)",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "kind": 6,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "class Prompt(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    data = db.Column(db.Text, nullable=False)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\nclass Poem(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    data = db.Column(db.Text, nullable=False)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "Poem",
        "kind": 6,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "class Poem(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    data = db.Column(db.Text, nullable=False)\n    date = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    prompt_id = db.Column(db.Integer, db.ForeignKey('prompt.id'), nullable=False)",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def login():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n        user = User.query.filter_by(email=email, password=password).first()\n        if user:\n            login_user(user, remember=True)\n            return redirect(url_for('views.home'))\n        else:\n            flash(\"Invalid credentials, try again.\", category='error')",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def logout():\n    logout_user()\n    return redirect(url_for('routes.login'))\n@routes.route('/sign-up', methods=['GET', 'POST'])\ndef sign_up():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        first_name = request.form.get('firstName')\n        password1 = request.form.get('password1')\n        password2 = request.form.get('password2')",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "sign_up",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def sign_up():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        first_name = request.form.get('firstName')\n        password1 = request.form.get('password1')\n        password2 = request.form.get('password2')\n        if len(email) < 4:\n            flash(\"Email must be at least 4 characters long.\", category='error')\n        elif len(first_name) < 2:\n            flash(\"First name must be at least 2 characters long.\", category='error')",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def profile():\n    user_id = current_user.id\n    # Fetch all prompts for the user\n    prompts = get_prompts_by_user_id(user_id)\n    # Count how many times the user has used the chatbot\n    chat_count = len(prompts)\n    # Get the most recent 5 questions\n    recent_questions = [prompt.data for prompt in prompts][-5:]\n    return render_template('profile.html', chat_count=chat_count, recent_questions=recent_questions)\n@routes.route('/chatbot', methods=['GET', 'POST'])",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a poetic assistant. Answer questions in short poems or hiakus.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot2",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot2():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a poetic assistant. Answer questions in a long poem.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot3",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot3():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a surfer who loves making surfing analogies.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot4",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot4():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are a drill instructor who uses visuals to teach students and you love apple pie.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "chatbot5",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def chatbot5():\n    if request.method == 'POST':\n        try:\n            user_input = request.form.get('message')\n            if not user_input:\n                return jsonify({\"error\": \"No message provided\"}), 400\n            # Save the user input as a new prompt\n            add_prompt(data=user_input, user_id=current_user.id)\n            # Create an instance of the Chat class\n            chat_instance = Chat(\"You are mafia crime boss who is flamboyant and one step ahead of the law.\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "about_us",
        "kind": 2,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "def about_us():\n    return render_template(\"about-us.html\")",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "routes",
        "kind": 5,
        "importPath": "website.routes",
        "description": "website.routes",
        "peekOfCode": "routes = Blueprint('routes', __name__)\n@routes.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n        user = User.query.filter_by(email=email, password=password).first()\n        if user:\n            login_user(user, remember=True)\n            return redirect(url_for('views.home'))",
        "detail": "website.routes",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def home():\n    return render_template(\"home.html\")\n@views.route('/left_sidebar')\ndef left_sidebar():\n    return render_template(\"left_sidebar.html\")\n@views.route('/right_sidebar')\ndef right_sidebar():\n    return render_template(\"right_sidebar.html\")\n@views.route('/no_sidebar')\ndef no_sidebar():",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "left_sidebar",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def left_sidebar():\n    return render_template(\"left_sidebar.html\")\n@views.route('/right_sidebar')\ndef right_sidebar():\n    return render_template(\"right_sidebar.html\")\n@views.route('/no_sidebar')\ndef no_sidebar():\n    return render_template(\"no_sidebar.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "right_sidebar",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def right_sidebar():\n    return render_template(\"right_sidebar.html\")\n@views.route('/no_sidebar')\ndef no_sidebar():\n    return render_template(\"no_sidebar.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "no_sidebar",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def no_sidebar():\n    return render_template(\"no_sidebar.html\")",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "views",
        "kind": 5,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "views = Blueprint('views', __name__)\n@views.route('/')\n@login_required\ndef home():\n    return render_template(\"home.html\")\n@views.route('/left_sidebar')\ndef left_sidebar():\n    return render_template(\"left_sidebar.html\")\n@views.route('/right_sidebar')\ndef right_sidebar():",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = create_app()\nwith app.app_context():\n    db.create_all()  # Create the database tables\n    # Your code here that needs to run within the app context\n    pass # To avoid indentation error\nif __name__ == \"__main__\":\n    port = int(os.environ.get(\"PORT\", 5000))\n    app.run(host=\"0.0.0.0\", port=port,debug=True)",
        "detail": "main",
        "documentation": {}
    }
]